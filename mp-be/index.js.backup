// index.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const path = require("path");
require("dotenv").config();

// Logging
const logger = require("./utils/logger");
const initializeAchievements = require("./utils/initializeAchievements");

// Register models (important for cross-model references)
require("./models/User");
require("./models/Course");
require("./models/Tutorial");
require("./models/Enrollment");
require("./models/Review");
require("./models/Progress");
require("./models/UserSession");
require("./models/Testimonial");
const {
  AchievementDefinition,
  UserAchievement,
} = require("./models/Achievement");

// Middleware
const { errorHandler } = require("./middlewares/errorHandler");

// Routes
const authRoutes = require("./routes/auth");
const userRoutes = require("./routes/users");
const courseRoutes = require("./routes/courses");
const tutorialRoutes = require("./routes/tutorials");
const reviewRoutes = require("./routes/reviews");
const progressRoutes = require("./routes/progress");
const achievementRoutes = require("./routes/achievements");
const testimonialRoutes = require("./routes/testimonials");
const dashboardRoutes = require("./routes/dashboard");
const adminRoutes = require("./routes/admin");
const teacherRoutes = require("./routes/teachers");
const protectedRoutes = require("./routes/protected");
const paymentsRoutes = require("./routes/payments");
const webhookRoutes = require("./routes/webhook");

const app = express();

// CORS configuration
const corsOptions = {
  origin: [
    "http://localhost:3000", // React dev server
    "http://localhost:3001", // Alternative React port
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
  ],
  credentials: true,
  optionsSuccessStatus: 200,
};

app.use(cors(corsOptions));

// Body parsing middleware
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

// Static file serving
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

console.log("🐰 Using Bunny CDN for all video storage and streaming");

// Routes
app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/courses", courseRoutes);
app.use("/api/tutorials", tutorialRoutes);
app.use("/api/reviews", reviewRoutes);
app.use("/api/progress", progressRoutes);
app.use("/api/achievements", achievementRoutes);
app.use("/api/testimonials", testimonialRoutes);
app.use("/api/dashboard", dashboardRoutes);
app.use("/api/admin", adminRoutes);
app.use("/api/teachers", teacherRoutes);
app.use("/api/protected", protectedRoutes);
app.use("/api/payments", paymentsRoutes);
app.use("/api/webhooks", webhookRoutes);

// Health check endpoint
app.get("/health", (req, res) => {
  const health = {
    status: "OK",
    timestamp: new Date().toISOString(),
    services: {
      database:
        mongoose.connection.readyState === 1 ? "connected" : "disconnected",
      bunny_cdn:
        process.env.BUNNY_API_KEY &&
        !process.env.BUNNY_API_KEY.includes("CHANGE_ME")
          ? "configured"
          : "not_configured",
    },
  };
  res.json(health);
});

// Error handling middleware
app.use(errorHandler);

// Database connection
mongoose
  .connect(process.env.MONGODB_URI || process.env.DB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("Connected to MongoDB");
    // Initialize achievements
    initializeAchievements()
      .then(() => console.log("Default achievements initialized"))
      .catch((error) => console.log("Error initializing achievements:", error));
  })
  .catch((error) => {
    console.log("MongoDB connection error:", error);
  });

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
});
