                                    "0 4px 12px rgba(102, 126, 234, 0.4)",
                                },
                              },
                              "& .MuiSlider-track": {
                                background:
                                  "linear-gradient(180deg, #667eea 0%, #764ba2 100%)",
                                width: 6,
                                border: "none",
                              },
                              "& .MuiSlider-rail": {
                                background:
                                  "linear-gradient(180deg, #444 0%, #222 100%)",
                                width: 6,
                              },
                            }}
                          />
                        </Box>

                        {/* Control Buttons */}
                        <Stack direction="row" spacing={1}>
                          <IconButton
                            size="small"
                            onClick={() =>
                              setMuted((m) => ({ ...m, [s.name]: !m[s.name] }))
                            }
                            sx={{
                              background: muted[s.name]
                                ? "linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%)"
                                : "linear-gradient(135deg, #51cf66 0%, #40c057 100%)",
                              color: "white",
                              border: "1px solid rgba(255, 255, 255, 0.2)",
                              "&:hover": {
                                transform: "scale(1.1)",
                                boxShadow: "0 4px 12px rgba(0,0,0,0.3)",
                              },
                              transition: "all 0.2s ease",
                            }}
                          >
                            {muted[s.name] ? (
                              <VolumeOff fontSize="small" />
                            ) : (
                              <VolumeUp fontSize="small" />
                            )}
                          </IconButton>

                          <IconButton
                            size="small"
                            onClick={() =>
                              setSolo((p) => (p === s.name ? null : s.name))
                            }
                            sx={{
                              background:
                                solo === s.name
                                  ? "linear-gradient(135deg, #ffd93d 0%, #ff9500 100%)"
                                  : "linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)",
                              color: "white",
                              border: "1px solid rgba(255, 255, 255, 0.2)",
                              "&:hover": {
                                transform: "scale(1.1)",
                                boxShadow: "0 4px 12px rgba(0,0,0,0.3)",
                              },
                              transition: "all 0.2s ease",
                            }}
                          >
                            <Hearing fontSize="small" />
                          </IconButton>
                        </Stack>
                      </Stack>
                    </Paper>
                  </Fade>
                ))}
              </Stack>
            </Box>
          </Paper>
        </Zoom>
      )}
    </Box>
  );
}

MultiTrackPlayer.propTypes = {
  tracks: PropTypes.arrayOf(
    PropTypes.shape({
      name: PropTypes.string.isRequired,
      url: PropTypes.string.isRequired,
    })
  ).isRequired,
};

export default MultiTrackPlayer;
